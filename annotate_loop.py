#!/usr/bin/env python
"""
CLI‚Äë—Å–∫—Ä–∏–ø—Ç: ¬´–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç‚Äë–ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π¬ª.

‚Äî –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 3 Markdown‚Äë—Ñ–∞–π–ª–∞ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏.
‚Äî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (o3) ‚Üí —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É (o4‚Äëmini) ‚Üí –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (o3).
‚Äî –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã –≤ JSON.
‚Äî –°–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ outputs/.
python annotate_loop.py docs/act1.md docs/act2.md docs/act3.md

python annotate_loop.py doc/doc_1.md doc/doc_2.md doc/doc_3.md
python annotate_loop.py doc/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ7.md doc/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ10.md doc/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ11.md

"""

from __future__ import annotations

import json
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, List, Dict

import typer
from openai import OpenAI
from tqdm import tqdm

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

LOG_DIR = Path("logs")
OUT_DIR = Path("outputs")
MODELS = {
    "annotation": "o3-mini",
    "review": "o4-mini",
    "optimization": "o3-mini",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Utils ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


def utc_timestamp() -> str:
    return datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")


def save_json(data: Any, stage: str) -> None:
    LOG_DIR.mkdir(exist_ok=True)
    fname = LOG_DIR / f"{utc_timestamp()}_{stage}.json"
    with fname.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def write_text(path: Path, text: str) -> None:
    OUT_DIR.mkdir(exist_ok=True)
    path.write_text(text, encoding="utf-8")


def call_llm(
    client: OpenAI,
    model: str,
    prompt: str,
    effort: str = "high",
    max_retries: int = 2,
) -> str:
    """–û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ OpenAI‚ÄØResponse API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π high) —Å –ø—Ä–æ—Å—Ç—ã–º –ø–æ–≤—Ç–æ—Ä–æ–º."""
    for attempt in range(1, max_retries + 1):
        try:
            resp = client.responses.create(
                model=model,
                reasoning={"effort": effort},
                input=[{"role": "user", "content": prompt}],
            )
            return resp.output_text
        except Exception as exc:  # noqa: BLE001
            if attempt == max_retries:
                raise
            typer.echo(f"LLM error: {exc}. Retry {attempt}/{max_retries}‚Ä¶", err=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


def main(
    doc_1: Path = typer.Argument(..., exists=True, readable=True),
    doc_2: Path = typer.Argument(..., exists=True, readable=True),
    doc_3: Path = typer.Argument(..., exists=True, readable=True),
) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        typer.secho("‚úñ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", fg=typer.colors.RED)
        raise typer.Exit(code=1)

    # –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Ö —Å–≤–æ–±–æ–¥–Ω–æ –º–µ–Ω—è—Ç—å)
    try:
        from prompt import (
            prompt_start,
            self_evaluation_prompt,
            process_optimization_prompt,
            legal_annotation_revision_prompt,
            legal_annotation_revision_prompt_end
            
        )
    except ImportError as exc:
        typer.secho(f"–ù–µ –Ω–∞–π–¥–µ–Ω prompt.py: {exc}", fg=typer.colors.RED)
        raise typer.Exit(code=1)

    client = OpenAI()

    docs = [doc_1, doc_2, doc_3]
    doc_texts: List[str] = [p.read_text(encoding="utf-8") for p in docs]

    summaries: List[str] = []
    reviews: List[str] = []

    # 1) –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è
    annot_log: List[Dict[str, str]] = []
    for idx, (path, text) in enumerate(zip(docs, doc_texts), start=1):
        prompt = f"{prompt_start}\n---\n{text}"
        typer.echo(f"üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è {path.name}‚Ä¶")
        summary = call_llm(client, MODELS["annotation"], prompt)
        summaries.append(summary)
        write_text(OUT_DIR / f"summary_{idx}.md", summary)
        annot_log.append({"doc": path.name, "prompt": prompt, "response": summary})
    save_json(annot_log, "annotation")

    # 2) –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞
    review_log: List[Dict[str, str]] = []
    for idx, (path, text, summary) in enumerate(zip(docs, doc_texts, summaries), start=1):
        prompt = (
            f"{self_evaluation_prompt}\n---\n–î–æ–∫—É–º–µ–Ω—Ç:\n{text}\n---\n–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:\n{summary}"
        )
        typer.echo(f"üîπ –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ {path.name}‚Ä¶")
        review = call_llm(client, MODELS["review"], prompt)
        reviews.append(review)
        write_text(OUT_DIR / f"review_{idx}.md", review)
        review_log.append({"doc": path.name, "prompt": prompt, "response": review})
    save_json(review_log, "review")

    # 3) –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    typer.echo("üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞‚Ä¶")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π –µ–¥–∏–Ω—ã–π prompt
    parts: List[str] = [process_optimization_prompt]
    for idx, (orig, summ, revw) in enumerate(zip(doc_texts, summaries, reviews), start=1):
        parts.append(
            f"### –î–æ–∫—É–º–µ–Ω—Ç‚ÄØ{idx}\n{orig}\n---\n–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è\n{summ}\n---\n–ó–∞–º–µ—á–∞–Ω–∏—è\n{revw}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —è–≤–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —É–ª—É—á—à–∏—Ç—å –µ–≥–æ
    parts.extend(
        [
            "–ò–∑—É—á–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø—Ä–æ–º–ø—Ç–∞, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞ —ç—Ç–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏.",
            "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞:",
            prompt_start,
            "#####",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–¥—É–º–∞–π—Ç–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É‚Äë–ø—Ä–æ–º–ø—Ç.",
        ]
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫—Ä—É–ø–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏
    optimization_prompt = "\n---\n".join(parts)

    refined_prompt_text = call_llm(client, MODELS["optimization"], optimization_prompt)
    write_text(OUT_DIR / "prompt_refined.txt", refined_prompt_text)
    save_json(
        {
            "prompt": optimization_prompt,
            "response": refined_prompt_text,
        },
        "optimization",
    )

    # 4) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
    revision_summaries: List[str] = []
    revision_log: List[Dict[str, str]] = []
    for idx, (path, text, summary, review) in enumerate(
        zip(docs, doc_texts, summaries, reviews), start=1
    ):
        revision_prompt = (
            f"{legal_annotation_revision_prompt}\\n\\n####\\n"
            f"–ò–°–•–û–î–ù–´–ô –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô –î–û–ö–£–ú–ï–ù–¢:\\n{text}\\n#####\\n"
            "–ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–ê–Ø –ê–ù–ù–û–¢–ê–¶–ò–Ø: –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å –æ—à–∏–±–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ "
            "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å.:\\n\\n"
            f"{summary}\\n\\n####\\n"
            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø: –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤, "
            "–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å.:\\n\\n"
            f"{review}\\n\\n####\\n"
            f"{legal_annotation_revision_prompt_end}\\n\\n####\\n"
            
        )
        typer.echo(f"üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è {path.name}‚Ä¶")
        revised = call_llm(client, MODELS["annotation"], revision_prompt)
        revision_summaries.append(revised)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –¥–≤—É–º—è –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        write_text(OUT_DIR / f"revision_{idx}.md", revised)
        write_text(OUT_DIR / f"summary2_{idx}.md", revised)
        revision_log.append(
            {
                "doc": path.name,
                "prompt": revision_prompt,
                "response": revised,
            }
        )
    save_json(revision_log, "revision")

    # 5) –í—Ç–æ—Ä–æ–π —Ä–∞—É–Ω–¥ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏
    second_review_log: List[Dict[str, str]] = []
    for idx, (path, text, revised) in enumerate(
        zip(docs, doc_texts, revision_summaries), start=1
    ):
        review2_prompt = (
            f"{self_evaluation_prompt}\\n---\\n–î–æ–∫—É–º–µ–Ω—Ç:\\n{text}\\n---\\n–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:\\n{revised}"
        )
        typer.echo(f"üîπ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ review {path.name}‚Ä¶")
        review2 = call_llm(client, MODELS["review"], review2_prompt)
        write_text(OUT_DIR / f"review2_{idx}.md", review2)
        second_review_log.append(
            {
                "doc": path.name,
                "prompt": review2_prompt,
                "response": review2,
            }
        )
    save_json(second_review_log, "second_review")

    typer.secho("‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –≤ –∫–∞—Ç–∞–ª–æ–≥–µ outputs/.", fg=typer.colors.GREEN)


if __name__ == "__main__":
    try:
        typer.run(main)
    except KeyboardInterrupt:
        sys.exit("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")