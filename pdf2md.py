#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
pdf2md.py  ‚Äî  OCR‚Äë–∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä PDF ‚Üí Markdown –Ω–∞ –±–∞–∑–µ Mistral¬†AI.

‚ùØ python pdf2md.py <path_to_pdf> [-o OUTPUT] [--method {auto,base64,upload}]
    path_to_pdf     ‚Äî –≤—Ö–æ–¥–Ω–æ–π PDF.
    -o, --output    ‚Äî –ø—É—Ç—å –¥–ª—è Markdown (–ø–æ‚ÄØ—É–º–æ–ª—á–∞–Ω–∏—é <basename>.md).
    --method        ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞:
                      auto    ‚Äî base64 ‚â§‚ÄØ5‚ÄØ–ú–ë, –∏–Ω–∞—á–µ upload  (default)
                      base64  ‚Äî –≤—Å–µ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ data‚ÄëURL
                      upload  ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–µ–∑ client.files.upload()
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MISTRAL_API_KEY –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.


pip install mistralai tqdm
python pdf2md.py /Users/sergejavdejcik/Library/Mobile Documents/com~apple~CloudDocs/code_2/LegalAlly/Lexi_brief/case_doc/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ7.pdf            # —Å–æ–∑–¥–∞—Å—Ç example.md
python pdf2md.py ./docs/report.pdf -o out.md # —è–≤–Ω—ã–π –ø—É—Ç—å –∫ .md

Lexi_brief/case_doc/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ7.pdf

python pdf2md.py "/Users/sergejavdejcik/Library/Mobile Documents/com~apple~CloudDocs/code_2/LegalAlly/Lexi_brief/case_doc/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ7.pdf"


"""

from __future__ import annotations

import argparse
import base64
import os
import sys
from pathlib import Path
from typing import Literal

from mistralai import Mistral
from tqdm import tqdm


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  helpers  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def encode_pdf_to_base64(pdf_path: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç PDF –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64‚Äë—Å—Ç—Ä–æ–∫—É (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤)."""
    with pdf_path.open("rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")


def extract_markdown(ocr_response) -> str:
    """
    –°–±–æ—Ä–∫–∞ Markdown –∏–∑ –æ—Ç–≤–µ—Ç–∞ OCR.
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ ocr_response.pages[i].markdown.
    """
    pages = getattr(ocr_response, "pages", [])
    if not pages:
        raise ValueError("OCR‚Äë–æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü.")
    md_parts: list[str] = []
    for page in pages:
        # page –º–æ–∂–µ—Ç –±—ã—Ç—å dataclass –∏–ª–∏ dict
        md_parts.append(page.markdown if hasattr(page, "markdown") else page["markdown"])
        md_parts.append("\n\n")  # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    return "".join(md_parts).strip()


def save_markdown(markdown: str, output_path: Path) -> None:
    output_path.write_text(markdown, encoding="utf-8")
    print(f"‚úÖ Markdown —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_path}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def process_pdf(
    pdf_path: Path,
    output_md: Path,
    method: Literal["auto", "base64", "upload"] = "auto",
    size_threshold: int = 5 * 1024 * 1024,
) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤—ã–∑–æ–≤ OCR, –∑–∞–ø–∏—Å—å Markdown."""
    api_key = os.getenv("MISTRAL_API_KEY")
    if not api_key:
        sys.exit("‚ùå¬†–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MISTRAL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    client = Mistral(api_key=api_key)

    # ‚îÄ‚îÄ –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    use_upload = method == "upload" or (
        method == "auto" and pdf_path.stat().st_size > size_threshold
    )

    if use_upload:
        print("‚Üë¬†–ó–∞–≥—Ä—É–∑–∫–∞ PDF –≤¬†Mistral¬†Storage‚Ä¶")
        with pdf_path.open("rb") as f:
            uploaded = client.files.upload(
                file={"file_name": pdf_path.name, "content": f},
                purpose="ocr",
            )
        signed_url = client.files.get_signed_url(file_id=uploaded.id).url
        doc_descriptor = {"type": "document_url", "document_url": signed_url}
    else:
        print("‚Üª¬†–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –≤¬†base64‚Ä¶")
        data_url = f"data:application/pdf;base64,{encode_pdf_to_base64(pdf_path)}"
        doc_descriptor = {"type": "document_url", "document_url": data_url}

    # ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ OCR ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    print("ü§ñ¬†–ó–∞–ø—É—Å–∫ OCR‚Ä¶ (–º–æ–¥–µ–ª—å mistral-ocr-latest)")
    ocr_response = client.ocr.process(
        model="mistral-ocr-latest",
        document=doc_descriptor,
        include_image_base64=False,  # –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    )

    # ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    markdown_text = extract_markdown(ocr_response)
    save_markdown(markdown_text, output_md)


def cli() -> None:
    parser = argparse.ArgumentParser(description="PDF ‚Üí Markdown —á–µ—Ä–µ–∑ Mistral¬†OCR")
    parser.add_argument("pdf", type=Path, help="–ü—É—Ç—å –∫ PDF‚Äë—Ñ–∞–π–ª—É")
    parser.add_argument(
        "-o",
        "--output",
        type=Path,
        help="–§–∞–π–ª Markdown (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é <basename>.md)",
    )
    parser.add_argument(
        "--method",
        choices=("auto", "base64", "upload"),
        default="auto",
        help="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ PDF –≤¬†API",
    )
    args = parser.parse_args()

    pdf_path: Path = args.pdf
    if not pdf_path.exists():
        sys.exit(f"‚ùå¬†–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
    if pdf_path.suffix.lower() != ".pdf":
        sys.exit("‚ùå¬†–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .pdf")

    output_md = args.output or pdf_path.with_suffix(".md")
    process_pdf(pdf_path, output_md, method=args.method)


if __name__ == "__main__":
    cli()